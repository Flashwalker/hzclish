#!/bin/bash
#
# hzclish - Hubzilla (ex Red Matrix) cli bash script.
# Version 2.1
# Source: https://notabug.org/uzver/hzclish
#
# License: WTFPL2 http://wtfpl2.com/
# uzver(at)protonmail.ch
#
# Deps: curl, jq, md2bbc.pl + libtext-markdown-perl libtext-typography-perl or pandoc + 2bbcode writer, grep, sed, awk, tr, mkdir, mktemp, rm, wc, which

thispath="$(realpath $0)"
thisdir="$(dirname "$thispath")"
dotdir=~/'.hzclish'
verbose=0
ssl=1
useragent='Mozilla/5.0 (Windows NT 6.1; rv:41.0) Gecko/20100101 Firefox/41.0'
mimetype='text/bbcode'

# FUNCTIONS

USAGE(){
    exec=$(basename "$0"); [[ "$exec" ]] || exec="${0##*/}"
    cat << EOF
  $exec - CLI bash wrapper script for the Hubzilla (Red Matrix) API.

  USAGE: $exec [OPTIONS] [-u LOGIN:DOMAIN[:PASSWORD]] [<<<"MESSAGE"]
    
  OPTIONS:
    -B                         BBCODE post instead of markdown
                                (use if you prefer to post in bbcode,
                                 or just as plain text, post message
                                 won't be markdowned)
    -c config                  Specify config file
                                (use different configs for different accounts)
    -d config                  Specify config file and set it as default auth
    -D                         Delete config and cookie files
    -g id|mid                  Get item (post) of given id or mid
    -h, --help                 Show this help
    -H                         HTML post instead of markdown
                                (use if you prefer to post in html, post message
                                 won't be markdowned)
    -i                         Post from stdin
    -m <str>                   Set markdown engine (overwrites: -P)
    -p                         Post message
    -P                         Use pandoc instead of markdown
                                (short for: -m "pandoc -f markdown_strict+footnotes+definition_lists+hard_line_breaks -t ${thisdir}/bbcode_phpbb.lua")
    -q                         Less verbose printing
    -r                         Renew auth token
    -s                         Set new authentification (save login, password)
    -S yes|no                  Use or not https (default: yes) (useful for inline auth: -u)
    -t                         Convert very last line with hashtags of message to categories,
                                and post with both same hashtags and categories
    -T                         Convert very last line with hashtags of message to categories,
                                and drop hashtags, post only with categories
    -u LOGIN:DOMAIN[:PASSWORD] Specify auth inline, e.g.: "inbox@example.com:hubdomain.com:password", or:
        "channel@hubdomain.com:password", or:
        "channel@hubdomain.com"
                                (use it if you do not want to save auth)
                                (implies not use with: -c, -D, -r, -s)
    -v                         Verbose mode

  EXAMPLES:
    Set authentification to config file:
      $exec -vs
     or to custom place:
      $exec -vc myConfig -s   # save in "$dotdir"
      $exec -vc ~/myConfig -s   # save in home directory
     or to custom place and set it default:
      $exec -vd myNewDefaultConfig -s   # save in "$dotdir"
      $exec -vd ~/myNewDefaultConfig -s   # save in home directory

    Post message:
      $exec
      $exec -vp
      $exec -c myConfig   # with custom config
      $exec -d myNewDefaultConfig   # with custom config & set it default

    Post message from stdin:
      $exec <<<"Hello world!"
      echo "Hello world!" | $exec
      cat myPost.md | $exec

    Get item by id or mid:
      $exec -g 1234567
      $exec -g 80833f7ead182a3f5b39079c3b3974acf4828e1113193a3160bd6c29df1f8c89@lastauth.com
      $exec -c myConfig -g 1234567   # with custom config
      $exec -d myNewDefaultConfig -g 1234567   # with custom config & set it default
EOF
}

CONFIG(){
    # Check for config file and create it if it does not exist
    if ! (($custconfig)) && ! (($setnew)); then
        confdir="$dotdir"
        [[ -f "${confdir}/defaultconfig" ]] && source "${confdir}/defaultconfig"
    else
        ! (($quiet)) && (($verbose)) && [[ $config ]] && echo -e "\e[0;36m""Using config: $config""\e[m"
        [[ -f "$config" ]] && confdir=$(dirname "$config")
        [[ -d "$confdir" ]] || confdir="$dotdir"
        if [[ -f "$config" ]]; then
            true
        else
            if [[ -f "${confdir}/$config" ]]; then
                config="${confdir}/$config"
            elif [[ -f "${confdir}/${config}.config" ]]; then
                config="${confdir}/${config}.config"
            fi
        fi
# echo confdir "$confdir"
# echo config "$config"
# exit
    fi
    if [[ -f "$config" ]]; then
        ! (($quiet)) && (($verbose)) && echo -e "\e[0;36m""Using config: $config""\e[m"
        # (($custconfig)) && confdir=$(dirname "$config")
        if (($setdefconf)); then
            ! (($quiet)) && (($verbose)) && echo -e "\e[0;36m""Setting default config: $config""\e[m"
            echo "config=\"$config\"">"${confdir}/defaultconfig" && [[ -f "${confdir}/defaultconfig" ]] && chmod 600 "${confdir}/defaultconfig"
        fi
    else
        mkdir -p "$confdir" && chmod 700 "$confdir"
        echo -e '\e[37;34m'"\e[1m[notice]\e[0m" "Creating new config file:"
        read -p "Enter hub domain (example.com): " domain
        domain=$(echo "${domain%/*}" | sed 's|^[[:space:]]*https\?://||g')
        if ! (($sslsetted)); then
            validsslres=0
            sslres=y
            while ! (($validsslres)); do
                read -n 1 -p "Does your hub use SSL? (Y/n): " sslres
                if [[ "${sslres,,}" == [Nn] ]]; then
                    validsslres=1
                    ssl=0
                    hub="http://$domain"
                elif [[ "${sslres,,}" == [Yy] || -z "$sslres" ]]; then
                    validsslres=1
                    ssl=1
                    hub="https://$domain"
                else
                    validsslres=0
                    echo -e "\e[0;31m\nResponse not valid, please answer y or n\e[m"
                fi
            done
            echo
        fi
        if (($ssl)); then
            hub="https://$domain"
        else
            hub="http://$domain"
        fi
        read -p "Enter login e-mail: " login
        read -p "Enter nickname (channel nickname) (or leave blank): " channel
        if [[ "$channel" ]]; then
            zid="${channel}@$domain"
        elif [[ "$login" ]]; then
            zid="${login}@$domain"
        fi
        if ! [[ "$login" ]]; then
            echo 'Please specify login'
            (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
            exit 1
        fi
        if ! (($custconfig)); then
            config="${confdir}/${zid}.config"
        fi

        # if [[ "$(grep 'token=.\+' "$config")" ]]; then
        source "$config"
        if [[ "$token" ]]; then
            echo -e '\e[37;31m'"\e[1m[error]\e[0m" "Script appears to be registered previously" >&2
            echo "Use -D option to delete auth and then -s to try again" >&2
            (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
            exit 1
        fi

        if [[ ! -f "${confdir}/defaultconfig" || "$(wc -m "${confdir}/defaultconfig"|cut -d ' ' -f 1)" == 0 ]] || (($setdefconf)); then
            ! (($quiet)) && (($verbose)) && echo -e "\e[0;36m""Setting default config: $config""\e[m"
            echo "config=\"$config\"">"${confdir}/defaultconfig" && [[ -f "${confdir}/defaultconfig" ]] && chmod 600 "${confdir}/defaultconfig"
        fi
        cookie="${zid}.cookie"
{
cat << EOF
hub="$hub"
login="$login"
channel="$channel"
zid="$zid"
useragent="$useragent"
cookie="\${zid}.cookie"
EOF
}>"$config"
        [[ -f "$config" ]] && chmod 600 "$config"
        if ! (($quiet)) && (($verbose)); then
            echo -e "\e[0;36m""These variables have been saved to ${config}:""\e[m"
            echo -e "\e[0;36m"; cat "$config"; echo -e "\e[m"
        fi
    fi
    source "$config"
    [[ -f "${confdir}/${zid}.cookie" ]] || (touch "${confdir}/${zid}.cookie" && chmod 600 "${confdir}/${zid}.cookie")

    if [[ "$(which md2bbc >& /dev/null; echo $?)" == 0 ]]; then
        markdown="md2bbc"
    elif [[ -f ~/"bin/md2bbc.pl" ]]; then
        markdown=~/"bin/md2bbc.pl"
    elif [[ -f "${thisdir}/md2bbc.pl" ]]; then
        markdown="${thisdir}/md2bbc.pl"
    elif [[ -f "${confdir}/md2bbc.pl" ]]; then
        markdown="${confdir}/md2bbc.pl"
    elif [[ -f "${dotdir}/md2bbc.pl" ]]; then
        markdown="${dotdir}/md2bbc.pl"
    fi
    if [[ "$(which jq >& /dev/null; echo $?)" == 0 ]]; then
        jq="jq"
    elif [[ -f ~/"bin/jq" ]]; then
        jq=~/"bin/jq"
    elif [[  -f "${thisdir}/jq" ]]; then
        jq="jq"
    elif [[ -f "${confdir}/jq" ]]; then
        jq="jq"
    elif [[ -f "${dotdir}/jq" ]]; then
        jq="jq"
    fi
}

PASSWORD(){
unset password
if [[ "$config" ]] && [[ "$(grep 'password=' "$config")" ]]; then
    source "$config"
else
    echo ""
    prompt="What is your password?: "
    while IFS= read -p "$prompt" -r -s -n 1 char
    do
        if [[ $char == $'\0' ]]; then
            break
        fi
            prompt='*'
            password+="$char"
    done
    echo -e "\n"
fi
}

SETAUTH(){
    CONFIG
    source "$config"
    if ! [[ "$password" ]]; then
        echo -e '\e[37;34m'"\e[1m[notice]\e[0m" "This will be the only time you will be asked for your password"
        echo "Your password will be stored plain in config file"
        PASSWORD
    fi
    sed -i '/password=/d' "$config"
    echo password=\"$(sed 's/\"/\\"/g'<<<"$password")\">>"$config"
    if (($verbose)); then
        echo -e "\e[0;36m""Password have been saved to $config""\e[m"
    fi
    
    # source "$config"
    echo "Getting token..."
    getauth=$(curl -ksSi --trace-ascii - \
        -u "${login}:$password" \
        --cookie-jar "${confdir}/$cookie" --cookie "${confdir}/$cookie" \
        -H "User-Agent: $useragent" \
        "${hub}/api/z/1.0/abconfig")
    token=$(echo "$getauth"|sed -n 's/^.*Authorization: Basic \(.*\)/\1/p1')

    # unset getauth
    if [[ "$token" ]]; then
        sed -i '/token=/d' "$config"
        echo "token=\"${token}\"">>"$config"
        # unset token
        if (($verbose)); then
            echo -e '\e[37;32m'"\e[1m[success]\e[0m" "Token saved"
        fi
    else
        echo -e '\e[37;31m'"\e[1m[error]\e[0m" "Getting token failed. Check/set your login/password/connection" >&2
(($verbose)) && echo -e '\e[37;31m'"\e[1m[post]\e[0m" >&2 && echo "$getauth" >&2
unset getauth
        (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
        exitstatus=1
    fi

    local error=''
    error=$(echo "$getauth" | grep -io '^This api requires login')
    [[ "$error" ]] || error=$(echo "$getauth" | grep -o '^HTTP/[[:digit:]]\.[[:digit:]] \+[3-9]\{1,3\}.*')
    if [[ "$error" ]]; then
        [[ "$token" ]] && echo 'but' >&2
        unset token
        echo -en '\e[37;31m'"\e[1m[error] \e[0m" >&2; echo -en "\e[0;31m" >&2; echo -n "$error" >&2; echo -e "\e[m" >&2
        echo "Check/set your login/password/server and try again" >&2
        (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
        exitstatus=1
    fi

    if (($exitstatus)); then
        (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
        exit $exitstatus
    fi
}

RETOKEN(){
    CONFIG
    source "$config"
    while [[ ! $retokened ]]; do
        if ! (($quiet)) && (($verbose)); then
            echo -e "\e[0;36m""Getting new token...""\e[m"
        fi
        if ! [[ "$password" ]]; then
            PASSWORD
        fi
        getauth=$(curl -ksSi --trace-ascii - \
            -u "${login}:$password" \
            --cookie-jar "${confdir}/$cookie" --cookie "${confdir}/$cookie" \
            -H "User-Agent: $useragent" \
            "${hub}/api/z/1.0/abconfig")
        local body=$(echo -n "$getauth"|grep -iom1 '{\".*[^\]\(["}]\|\]\)}')
        [[ "$body" ]] || body=$(echo -n "$getauth"|grep -i 'error')
        unset password
        token=$(echo "$getauth"|sed -n 's/^.*Authorization: Basic \(.*\)/\1/p1')

        # unset getauth
        if [[ "$token" ]]; then
            sed -i '/token/d' "$config"
            echo "token=\"${token}\"">>"$config"
            # unset token
            if (($verbose)); then
                echo -e '\e[37;32m'"\e[1m[success]\e[0m" "Token saved"
            fi
        else
            echo -e '\e[37;31m'"\e[1m[error]\e[0m" "Getting new token failed. Check/set your login/password/server" >&2
(($verbose)) && echo -e '\e[37;31m'"\e[1m[post]\e[0m" && echo "$getauth" >&2
unset getauth
            # (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
            exitstatus=1
        fi

        local error=''
        error=$(echo "$getauth" | grep -io '^This api requires login')
        [[ "$error" ]] || error=$(echo "$getauth" | grep -o '^HTTP/[[:digit:]]\.[[:digit:]] \+[3-9]\{1,3\}.*')
        if [[ "$error" ]]; then
            [[ "$token" ]] && echo 'but'
            unset token
            echo -en '\e[37;31m'"\e[1m[error] \e[0m" >&2; echo -en "\e[0;31m" >&2; echo -n "$error" >&2; echo -e "\e[m" >&2
            (($verbose)) && [[ "$body" ]] && echo -en "\e[0;31m" >&2 && echo -n "$body" >&2 && echo -e "\e[m" >&2
            echo "Check/set your login/password/server" >&2
            # (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
            exitstatus=1
        fi

        if (($exitstatus)); then
            (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
            exit $exitstatus
        fi
        ((retokened++))
    done
}

GETPOST(){
    if ! (($inlineauth)); then
        CONFIG
        source "$config"
        unset password
    fi
    local mid='' pid='' posturl='' posturl2='' username='' useraddr='' userurl='' userhub='' posttitle=''
    local post=$(mktemp /tmp/hzpost.XXXXXX)
    local postbody=$(mktemp /tmp/hzpostbody.XXXXXX)
    if [[ "$1" ]]; then
        if [[ "$1" =~ .+@.+ ]]; then
            mid="$1"
            local req="mid=${mid%%&*}"
        else
            pid="$1"
            local req="item_id=$pid"
        fi
    else
        echo 'Please specify the message id'
        (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
        exit 1
    fi
    [[ "$2" == 'urlonly' ]] && local urlonly=1
    GETPOSTINIT(){
        if (($inlineauth)); then
            ! [[ "$password" ]] && PASSWORD
            (($verbose)) && echo -e "\e[0;36m""Getting post ${req#*=}...""\e[m"
            curl -ksSi -u "${login}:$password" \
                -H "User-Agent: $useragent" \
                -H "Content-Type: application/json" \
                -H 'Accept: application/json' \
                "${hub}/api/z/1.0/item/full?$req" >"$post"
            unset password
        else
            (($verbose)) && echo -e "\e[0;36m""Getting post ${req#*=}...""\e[m"
            curl -ksSi \
                -H "Authorization: Basic $token" \
                --cookie-jar "${confdir}/$cookie" --cookie "${confdir}/$cookie" \
                -H "User-Agent: $useragent" \
                -H "Content-Type: application/json" \
                -H 'Accept: application/json' \
                "${hub}/api/z/1.0/item/full?$req" >"$post"
            unset password
            unset token
        fi
        grep -iom1 '{\".*[^\]\(["}]\|\]\)}' "$post" >"$postbody"
        local postbodylength=$(wc -m "$postbody"|cut -d ' ' -f 1)
        if (($postbodylength)); then
            pid=$("$jq" -r '.item|.[].id' "$postbody")
            mid=$("$jq" -r '.item|.[].message_id' "$postbody")
            posturl=$("$jq" -r '.item|.[].permalink' "$postbody")
            posturl2="$(echo -n "$posturl"|sed 's|^.*\(https\?://[^/]\+\)/.*|\1|')/display/$mid"
            if ! (($urlonly)); then
                username=$("$jq" -r '.item|.[].author.name' "$postbody")
                useraddr=$("$jq" -r '.item|.[].author.address' "$postbody")
                userurl=$("$jq" -r '.item|.[].author.url' "$postbody")
                userhub=$(echo -n "$userurl"|sed 's|^.*https\?://\([^/]\+\)/.*|\1|')
                posttitle=$("$jq" -r '.item|.[].title' "$postbody")
            fi
        fi
    }
    GETPOSTINIT
    local error=''
    error=$(grep -io '^This api requires login' "$post")
    [[ "$error" ]] || error=$(grep -o '^HTTP/[[:digit:]]\.[[:digit:]] \+[3-9]\{1,3\}.*' "$post")
    if [[ "$error" ]]; then
        if [[ $retokened != 1 ]] && [[ $inlineauth != 1 ]]; then
            if ! (($quiet)); then
                # echo -en '\e[37;31m'"\e[1m[error] \e[0m" >&2; echo -en "\e[0;31m" >&2; echo -n "$error" >&2; echo -e "\e[m" >&2
                # echo -e '\e[37;32m'"\e[1m[warning] \e[0m" "$error" >&2
                echo -en "\e[0;33m[warning] \e[m" >&2; echo "$error" >&2
                echo "Error or invalid token, requesting new one..." >&2
            fi
            RETOKEN
            GETPOSTINIT
            local error=''
            error=$(grep -io '^This api requires login' "$post")
            [[ "$error" ]] || error=$(grep -o '^HTTP/[[:digit:]]\.[[:digit:]] \+[3-9]\{1,3\}.*' "$post")
            if [[ "$error" ]]; then
                echo -en '\e[37;31m'"\e[1m[error] \e[0m" >&2; echo -en "\e[0;31m" >&2; echo -n "$error" >&2; echo -e "\e[m" >&2
                echo "Can't get post due authorization issue" >&2
                echo "Check/set your login/password/server and try to get post again" >&2
                (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
                exit 1
            fi
        else
            echo -en '\e[37;31m'"\e[1m[error] \e[0m" >&2; echo -en "\e[0;31m" >&2; echo -n "$error" >&2; echo -e "\e[m" >&2
            echo "Can't get post due authorization issue" >&2
            echo "Check/set your login/password/server and try to get post again" >&2
            (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
            exit 1
        fi
    fi

    if [[ "$mid" || "$pid" ]]; then
        if ! (($urlonly)); then
            echo -e "\e[0;36m""$useraddr:""\e[m\n"
            [[ "$posttitle" ]] && echo -e "${posttitle}\n"
            "$jq" -r '.item|.[].body' "$postbody"
            if ! (($quiet)); then
                echo -e "\n\e[0;36m""post url: $posturl2""\e[m"
                (($verbose)) && echo -e "\e[0;36m""post id: $pid""\e[m"
                (($verbose)) && echo -e "\e[0;36m""user url: $userurl""\e[m"
            fi
        else
            echo -e "\n\e[0;36m""$posturl2""\e[m"
        fi  
    else
        echo -e '\e[37;31m'"\e[1m[error]\e[0m" "No post returned, please try again or give up" >&2
(($verbose)) && echo -e '\e[37;31m'"\e[1m[post]\e[0m" >&2 && cat "$post" >&2
        (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
        exit 1
    fi
    /bin/rm -f "$post" "$postbody"
}

POST(){
    if ! (($inlineauth)); then
        CONFIG
        source "$config"
        unset password
    fi
    if ! (($hasmsg)); then
        local message=$(mktemp /tmp/hzmessage.XXXXXX)
        local msgbody=$(mktemp /tmp/hzmsgbody.XXXXXX)
    else
        local message="$message"
        local msgbody="$msgbody"
# echo HAS MESSAGE
# echo
# echo verbose "$verbose"
# echo hasmsg "$hasmsg"
# echo msgbody "$msgbody"
# echo message "$message"
# echo tagline "$tagline"
# echo tags "$tags"
# echo catline "$catline"
# cat "$message"
# exit
    fi
    [[ -f "$message" && -f "$msgbody" ]] && chmod 600 "$message" "$msgbody"
    local mid='' pid='' success='' error='' posturl='' posturl2=''
    local post=$(mktemp /tmp/hzpost.XXXXXX)
    local postbody=$(mktemp /tmp/hzpostbody.XXXXXX)

        if ! (($hasmsg)); then
            if ! [[ -t 0 ]] || (($stdin)); then
                eval 'stdin=$(cat); echo "$stdin"' >"$message"
            else
                $EDITOR "$message"
            fi
            msglength=$(wc -m "$message"|cut -d ' ' -f 1)
            if ! (($msglength)); then
                echo -e '\e[37;31m'"\e[1m[error]\e[0m" "The message is empty. Not posting message" >&2
                echo "Not deleting the file \"$message\" in case it is not empty" >&2
                /bin/rm -f "$msgbody"
                (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
                exit 1
            fi
            ## Delete leading blank lines
            sed -i '/./,$!d' "$message"
        fi
        if [[ ! "$tagline" ]]; then
            tagline=$(tail -n 1 "$message" | grep -io '^[[:space:]]*\?\#.*\?')
             [[ "$tagline" ]] && hastagline="$tagline"
            ! (($catonly)) && tags=$(echo "$tagline" | sed 's|^[[:space:]]*||; s|,||g')
        fi
        if [[ ! "$catline" ]]; then
            catline=$(head -n 1 "$message" | grep -iom1 '^[[:space:]]*\?\*.*\?')
            [[ "$catline" ]] && hascatline=1
            (($tagtocat)) && catline=$(echo "$tagline" | sed 's|^[[:space:]]*\?\#|\*|g; s|[[:space:]]*\?\#| \*|g')
        fi
        catsarr=($(echo "$catline" | sed 's|[\*]| |g; s|^[[:space:]]*||; s|,||g; s/\"/\\"/g'))
        local category=''
        for c in "${catsarr[@]}"; do category+="${c},"; done
        # (($catonly)) && tagline='' && tags=''
# echo verbose "$verbose"
# echo hasmsg "$hasmsg"
# echo msgbody "$msgbody"
# echo message "$message"
# echo tagline "$tagline"
# echo hastagline "$hastagline"
# echo tags "$tags"
# echo catline "$catline"
# echo catsarr "${catsarr[@]}"
# echo category "$category"
# cat "$message"
# echo
        # msg=$(cat "$message")
        cp "$message" "$msgbody"
# echo msg "$msg"
# echo 
# echo 
# exit
        if ! (($catonly)); then
            if [[ "$tagline" || "$hastagline" ]]; then
                echo "$(awk -F "$tagline" '{print $1}' "$msgbody")" >"$msgbody"
            fi
        else
            tagline='' && tags=''
            [[ "$hastagline" ]] && echo "$(awk -F "$hastagline" '{print $1}' "$msgbody")" >"$msgbody"
        fi
# echo msg "$msg"
# echo hasmsg $hasmsg
# echo hastagline $hastagline
# echo hascatline $hascatline
# echo catline "$catline"
# exit
        if ! (($hasmsg)) && ! (($tagtocat)) && (($hascatline)); then
            # FIXME: slow part
            [[ "$catline" ]] && echo "$(awk -v cl="$catline" '$0 == cl {i=1;next};i && i++ <= 999' "$msgbody")" >"$msgbody"
            ## Delete leading blank lines
            sed -i '/./,$!d' "$msgbody"
        fi
# exit
        # titleline=$(head -n 1 "$msgbody" | grep -iom1 '^[[:space:]]*\?\#[[:space:]]\+.*\?')
        # [[ "$titleline" ]] && sed -i '/'"$titleline"'/d' "$msgbody"
        # [[ "$titleline" ]] && echo "$(awk -F "$titleline" '{print $1}' "$msgbody")" >"$msgbody"
        title=$(head -n 1 "$msgbody" | grep -iom1 '^[[:space:]]*\?\#[[:space:]]\+.*\?' | sed 's/\"/\\"/g; s/^[[:space:]]*\?\#[[:space:]]\+//g')
        [[ "$title" ]] && sed -i 1d "$msgbody"
        ## Delete leading blank lines
        sed -i '/./,$!d' "$msgbody"
# exit
# echo hasmsg $hasmsg
# echo hastagline $hastagline
# echo hascatline $hascatline
# echo message "$message"
# echo tagline "$tagline"
# echo tags "$tags"
# echo catline "$catline"
# echo catsarr "${catsarr[@]}"
# echo title "$title"
# echo -n 'message '; cat "$message"; echo 
# echo msg "$msg"
# exit
        # [[ "$title" ]] && echo "title=\"$title\"">"$msgbody"
        # [[ "$category" ]] && echo "category=\"${category%,}\"">>"$msgbody"
        if (($pandoc)); then
            if [[ -f ~/"bin/bbcode_phpbb.lua" ]]; then
                bbcode=~/"bin/bbcode_phpbb.lua"
            elif [[ -f "${thisdir}/bbcode_phpbb.lua" ]]; then
                bbcode="${thisdir}/bbcode_phpbb.lua"
            elif [[ -f "${confdir}/bbcode_phpbb.lua" ]]; then
                bbcode="${confdir}/bbcode_phpbb.lua"
            elif [[ -f "${dotdir}/bbcode_phpbb.lua" ]]; then
                bbcode="${dotdir}/bbcode_phpbb.lua"
            fi
            # markdown="pandoc -f markdown -t $bbcode" # (pandoc's extended markdown)
            # markdown="pandoc -f markdown_phpextra -t $bbcode" # (PHP Markdown Extra extended markdown)
            # markdown="pandoc -f markdown_github -t $bbcode" #  (github  extended  markdown)
            # markdown="pandoc -f markdown_strict+footnotes+definition_lists+hard_line_breaks -t $bbcode" # (original unextended markdown + with footnotes and definition lists and hard line breaks)
            markdown="pandoc -f markdown_strict+footnotes+definition_lists+hard_line_breaks -t $bbcode" # (original unextended markdown + with footnotes and definition lists and hard line breaks)
        elif [[ "$mdexec" ]]; then
            markdown="$mdexec"
        fi
        echo "$(if (($bb)) || (($html)); then cat "$msgbody"; else cat "$msgbody"|$markdown; fi; [[ "$tags" ]] && echo -en "\n$tags")" >"$msgbody"
        # [[ "$htmlstatus" ]] && echo "htmlstatus=\"$htmlstatus\"">>"$msgbody"
# echo msg "$msg"
# exit
        # source "$msgbody"
# echo " export token='$token'"
# echo " export useragent='$useragent'"
# echo " export hub='$hub'"
# echo " export title='$title'"
# echo " export category='$category'"
# echo " export channel='$channel'"
# echo " export htmlstatus='$htmlstatus'"
# echo " export cookie='$cookie'"
# exit
    POSTINIT(){
        if (($inlineauth)); then
            ! [[ "$password" ]] && PASSWORD
            (($verbose)) && echo -e "\e[0;36m""Posting...""\e[m"
            cat "$msgbody" | curl -ksSi \
            -u "${login}:$password" \s
            -H "User-Agent: $useragent" \
            -X POST \
            "${hub}/api/z/1.0/item/update" \
            -F "title=$title" \
            -F "category=$category" \
            -F "mimetype=$mimetype" \
            -F 'body=<-' >"$post"
            unset password
        else
            (($verbose)) && echo -e "\e[0;36m""Posting...""\e[m"
            cat "$msgbody" | curl -ksSi \
            -H "Authorization: Basic $token" \
            --cookie-jar "${confdir}/$cookie" --cookie "${confdir}/$cookie" \
            -H "User-Agent: $useragent" \
            -X POST \
            "${hub}/api/z/1.0/item/update" \
            -F "title=$title" \
            -F "category=$category" \
            -F "mimetype=$mimetype" \
            -F 'body=<-' >"$post"
            unset password
            unset token
        fi
# cat "$post"
# exit
        grep -iom1 '{\".*[^\]\(["}]\|\]\)}' "$post" >"$postbody"
        local postbodylength=$(wc -m "$postbody"|cut -d ' ' -f 1)
        (($postbodylength)) && success=$("$jq" -r '.success' "$postbody")
        if [[ "$success" == "true" ]]; then
            pid=$("$jq" -r '.item_id' "$postbody")
            mid=$("$jq" -r '.item.mid' "$postbody")
            posturl=$("$jq" -r '.item.plink' "$postbody")
            posturl2=$("$jq" -r '.item.llink' "$postbody")
        fi
    }
    POSTINIT
    error=$(grep -io '^This api requires login' "$post")
    [[ "$error" ]] || error=$(grep -o '^HTTP/[[:digit:]]\.[[:digit:]] \+[3-9]\{1,3\}.*' "$post")
# echo error "$error"
# exit
    # if [[ "$error" ]]; then
    if [[ "$error" || "$success" == "false" ]]; then
        [[ "$error" ]] || error=$("$jq" -r '.message' "$postbody")
        if [[ "$error" == 'no content' ]]; then
            if ! (($quiet)); then
                echo -en '\e[37;31m'"\e[1m[error] \e[0m" >&2; echo -en "\e[0;31m"; echo -n "$error" >&2; echo -e "\e[m" >&2
                echo "Error or invalid token, requesting new one..." >&2
            fi
            (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
            exit 1
        else
            if ! (($retokened)) && ! (($inlineauth)); then
                if ! (($quiet)); then
                    # echo -en '\e[37;31m'"\e[1m[error] \e[0m" >&2; echo -en "\e[0;31m" >&2; echo -n "$error" >&2; echo -e "\e[m" >&2
                    # echo -e '\e[37;32m'"\e[1m[warning] \e[0m" "$error" >&2
                    # echo -en "\e[0;33m[warning] \e[m" >&2; echo "$error" >&2
                    echo -en '\e[37;32m'"\e[1m[warning] \e[0m" >&2; echo "$error" >&2
                    echo "Error or invalid token, requesting new one..." >&2
                fi
                RETOKEN
                local success=''; local error=''
                POSTINIT
                error=$(grep -io '^This api requires login' "$post")
                [[ "$error" ]] || error=$(grep -o '^HTTP/[[:digit:]]\.[[:digit:]] \+[3-9]\{1,3\}.*' "$post")
                if [[  "$error" || "$success" == "false" ]]; then
                    [[ "$error" ]] || error=$("$jq" -r '.message' "$postbody")
                    echo -en '\e[37;31m'"\e[1m[error] \e[0m" >&2; echo -en "\e[0;31m"; echo -n "$error" >&2; echo -e "\e[m" >&2
                    echo "Can't post due authorization issue" >&2
                    echo "Check/set your login/password/server and try to post again" >&2
                    (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
                    exit 1
                fi
            else
                echo -en '\e[37;31m'"\e[1m[error] \e[0m" >&2; echo -en "\e[0;31m" >&2; echo -n "$error" >&2; echo -e "\e[m" >&2
                echo "Can't post due authorization issue" >&2
                echo "Check/set your login/password/server and try to post again" >&2
                (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
                exit 1
            fi
        fi
    fi
    
    if [[ "$pid" ]]; then
        if ! (($quiet)); then
            if [[ "$pid" ]]; then
                local id="$pid"
            elif [[ "$mid" ]]; then
                local id="$mid"
            fi
            echo -e '\e[37;32m'"\e[1m[success]\e[0m" "Message "$id" posted"
            echo -en "\e[0;36m""post url: ""\e[m"
        fi
        echo -e "\e[0;36m""$posturl2""\e[m"
        /bin/rm -f "$message" "$msgbody"
    else
        echo -e '\e[37;31m'"\e[1m[error]\e[0m" "No post id returned, please try again or give up" >&2
(($verbose)) && echo -e '\e[37;31m'"\e[1m[post]:\n" >&2 && cat "$post" >&2 && echo -e "\e[0m" >&2
        echo "Message should still be saved in the file $message" >&2
        /bin/rm -f "$msgbody"
        (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
        exit 1
    fi
    /bin/rm -f "$post" "$postbody"
}

# DELETE CONFIG & COOKIE
DELETE(){
    [[ "$config" ]] && source "$config" && unset password
    ! (($quiet)) && echo Deleting: cookie: "${confdir}/${zid}.cookie", config: "$config"
    [[ "$confdir" && "$zid" ]] && [[ -f "${confdir}/${zid}.cookie" ]] && /bin/rm -f "${confdir}/${zid}.cookie"
    [[ "$config" ]] && [[ -f "$config" ]] && /bin/rm -f "$config"
}

if [[ $# -lt 1 ]]; then
    exe=1
    POST
elif [[ "$1" == '--help' ]]; then
    USAGE
    exit 0
fi

# RUN OPTIONS
while getopts "B:c:d:Dg:hHim:pPqrsS:tTu:v" OPTION
do
  case $OPTION in
    B)
      bb=1
      mimetype='text/bbcode'
      ;;
    c)
      if [[ "$OPTARG" ]]; then
        config="$OPTARG"
        custconfig=1
      fi
      ;;
    d)
      if [[ "$OPTARG" ]]; then
        config="$OPTARG"
        custconfig=1
      fi
      setdefconf=1
      ;;
    D)
      exe=1
      DELETE
      ;;
    g)
      exe=1
      id="$OPTARG"
      GETPOST "$id"
      ;;
    h)
      exe=1
      USAGE
      ;;
    H)
      html=1
      mimetype='text/html'
      ;;
    i)
      stdin=1
      ;;
    m)
      mdexec="$OPTARG"
      html=1
      ;;
    p)
      exe=1
      POST
      ;;
    P)
      pandoc=1
      html=1
      ;;
    q)
      quiet=1
      ;;
    r)
      exe=1
      RETOKEN
      ;;
    s)
      exe=1
      setnew=1
      SETAUTH
      ;;
    S)
      sslarg="$OPTARG"
      if [[ "$sslarg" ]]; then
        if [[ "$sslarg" == [nN][oO] ]]; then
          ssl=0
          sslsetted=1
        elif [[ "$sslarg" == [yY][eE][sS] ]];   then
          ssl=1
          sslsetted=1
        fi
      else
        ssl=1
        sslsetted=1
      fi
      ;;
    t)
      tagtocat=1
      ;;
    T)
      tagtocat=1
      catonly=1
      ;;
    u)
      if [[ "$OPTARG" ]]; then
        # "user@example.com:hubdomain.com:password"
        haspass=$(echo "$OPTARG" | awk -F':' '{print $3}')
        login="${OPTARG%%:*}"
        if [[ "$haspass" ]]; then
          domainandpass="${OPTARG#*:}"
          domain="${domainandpass%%:*}"
          password="${domainandpass#*:}"
          unset haspass
          unset domainandpass
        else
          domain="${OPTARG##*:}"
        fi
        if (($ssl)); then
          hub="https://$domain"
        else
          hub="http://$domain"
        fi
        zid=""
        inlineauth=1
      fi
      ;;
    v)
      verbose=1
      ;;
    \?)
      # echo -e '\e[37;34m'"\e[1m[notice]\e[0m" "Invalid option: -$OPTARG" >&2
      echo -e '\e[37;34m'"\e[1m[notice]\e[0m" "Invalid option" >&2
      (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
      exit 1
      ;;
    :)
      echo -e '\e[37;34m'"\e[1m[notice]\e[0m" "Option -$OPTARG requires an argument" >&2
      (($verbose)) && echo -e "\e[0;36m""Exiting""\e[m"
      exit 1
      ;;
  esac
done
shift $(($OPTIND -1))
# echo $exe; exit
## Post if no other functional commands was given
if ! (($exe)); then
  exe=1
  POST
fi

exit 0

### TODO:
# private post
# use keyring
# delete post
# comment post
# delete comment
# reshare post
# like, dislike
# attach image to post
# read post + comments
# notifications
# debug
# version option
# webdav files
# more errors handle
